import * as repl  from 'repl';
import * as vm from 'vm';
import * as fs from 'fs';
import {findUp} from 'find-up';

interface ReplicantConfig {
  libs: {}
}

export class Replicant {
  
  static async start() {
    const args = process.argv.slice(2);
    const config = await Replicant.getConfig();
    const libs = config.libs;
    
    if (args.length <= 0) {
      Replicant.setGlobals(libs);

      repl.start({});
    } else {
      const replicantContext = libs;
      
      const text = fs.readFileSync(args[0], 'utf-8');    
      vm.runInNewContext(text, replicantContext);
    }

  }
  
  static setGlobals(config: {[key:string]:any}) {
    const libs: {[key:string]:any} = {};
    Object.keys(config).forEach(async key => {
      libs[key] = await import(config[key])
    });

    return libs;
  }
  
  static async getConfig():  Promise<ReplicantConfig> {
    let  config = {libs: {}};
    const configFile = await this.findFile('replicant.json');
    
    if (configFile) {
      config = JSON.parse(fs.readFileSync(configFile, 'utf-8'))
    }

    return config;
  }

  static async findFile(filename: string) {
 
    try {
      let filePath = await findUp(filename);
      return filePath;
    } catch(err) {
      console.error(err);
      return null;
    }
  }
  
}